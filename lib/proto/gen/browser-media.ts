// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.27.0
// source: browser-media.proto

/* eslint-disable */
import { Timestamp } from "./google/protobuf/timestamp";

/** Browsers that are supported. */
export enum BrowserType {
  UNSPECIFIED = 0,
  /** GENERIC - Any generic browser that is not one of the below ones. */
  GENERIC = 1,
  /** CHROMIUM - Major browser flavours */
  CHROMIUM = 2,
  FIREFOX = 3,
  SAFARI = 4,
  /** CHROMIUM_CHROME - Chromium variations */
  CHROMIUM_CHROME = 5,
  CHROMIUM_OPERA = 6,
  CHROMIUM_BRAVE = 7,
  CHROMIUM_EDGE = 8,
  UNRECOGNIZED = -1,
}

export function browserTypeFromJSON(object: any): BrowserType {
  switch (object) {
    case 0:
    case "BROWSER_TYPE_UNSPECIFIED":
      return BrowserType.UNSPECIFIED;
    case 1:
    case "BROWSER_TYPE_GENERIC":
      return BrowserType.GENERIC;
    case 2:
    case "BROWSER_TYPE_CHROMIUM":
      return BrowserType.CHROMIUM;
    case 3:
    case "BROWSER_TYPE_FIREFOX":
      return BrowserType.FIREFOX;
    case 4:
    case "BROWSER_TYPE_SAFARI":
      return BrowserType.SAFARI;
    case 5:
    case "BROWSER_TYPE_CHROMIUM_CHROME":
      return BrowserType.CHROMIUM_CHROME;
    case 6:
    case "BROWSER_TYPE_CHROMIUM_OPERA":
      return BrowserType.CHROMIUM_OPERA;
    case 7:
    case "BROWSER_TYPE_CHROMIUM_BRAVE":
      return BrowserType.CHROMIUM_BRAVE;
    case 8:
    case "BROWSER_TYPE_CHROMIUM_EDGE":
      return BrowserType.CHROMIUM_EDGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BrowserType.UNRECOGNIZED;
  }
}

export function browserTypeToJSON(object: BrowserType): string {
  switch (object) {
    case BrowserType.UNSPECIFIED:
      return "BROWSER_TYPE_UNSPECIFIED";
    case BrowserType.GENERIC:
      return "BROWSER_TYPE_GENERIC";
    case BrowserType.CHROMIUM:
      return "BROWSER_TYPE_CHROMIUM";
    case BrowserType.FIREFOX:
      return "BROWSER_TYPE_FIREFOX";
    case BrowserType.SAFARI:
      return "BROWSER_TYPE_SAFARI";
    case BrowserType.CHROMIUM_CHROME:
      return "BROWSER_TYPE_CHROMIUM_CHROME";
    case BrowserType.CHROMIUM_OPERA:
      return "BROWSER_TYPE_CHROMIUM_OPERA";
    case BrowserType.CHROMIUM_BRAVE:
      return "BROWSER_TYPE_CHROMIUM_BRAVE";
    case BrowserType.CHROMIUM_EDGE:
      return "BROWSER_TYPE_CHROMIUM_EDGE";
    case BrowserType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents the current state of some active media. */
export interface MediaState {
  source: MediaState_Source | undefined;
  metadata: MediaState_Metadata | undefined;
  playbackState: MediaState_PlaybackState | undefined;
  resourceLinks: MediaState_ResourceLinks | undefined;
  images: MediaState_Image[];
}

export interface MediaState_Source {
  /**
   * The domain name of the media source in reverse domain name notation.
   * This reverse domain may never end with ".www",
   * as it makes the reverse domain name only more ambiguous.
   */
  reverseDomain: string;
  /** The exact URL of the page that is playing the media. */
  siteUrl: string;
  /** The URL to the favicon of the web page. */
  faviconUrl?: string | undefined;
}

export interface MediaState_Metadata {
  title: string;
  artist?: string | undefined;
  album?:
    | string
    | undefined;
  /**
   * The length of the media in seconds.
   * This is optional, as it might not be possible
   * to determine the duration every time.
   */
  duration?: number | undefined;
}

export interface MediaState_PlaybackState {
  /** Playback position in seconds. */
  position: number;
  /**
   * The timestamp at which the position was valid.
   * Allows to calculate the correct for any point in time,
   * in case the media is playing and the position is advancing.
   */
  positionTimestamp:
    | Date
    | undefined;
  /** Whether the media is currently playing. */
  playing: boolean;
}

export interface MediaState_Image {
  url?: string | undefined;
  data?: Uint8Array | undefined;
  mimeType?: string | undefined;
  width?: number | undefined;
  height?: number | undefined;
}

export interface MediaState_ResourceLinks {
  trackUrl: { [key: string]: string };
  albumUrl: { [key: string]: string };
  artistUrl: { [key: string]: string };
}

export interface MediaState_ResourceLinks_TrackUrlEntry {
  key: string;
  value: string;
}

export interface MediaState_ResourceLinks_AlbumUrlEntry {
  key: string;
  value: string;
}

export interface MediaState_ResourceLinks_ArtistUrlEntry {
  key: string;
  value: string;
}

/**
 * The browser extension connects to the desktop application.
 * The Hello message must be the first message that is sent by the extension.
 * The extension communicates the browser type it is running in,
 * so that the receiver can associate it with the appropriate media
 * that is detected via system APIs.
 */
export interface Hello {
  browserType: BrowserType;
}

/**
 * After the browser extension sent the Hello message,
 * the desktop application can subscribe to live media updates.
 * This message is allowed to be sent multiple times.
 * When it is sent again the subscription is changed to the media sources
 * that were listed in the most recent message.
 * The contents of older messages will be discarded.
 */
export interface SubscribeMedia {
  websites: SubscribeMedia_Website[];
}

export interface SubscribeMedia_Website {
  /**
   * Which websites to observe for live media changes.
   * Uses the same reverse domain name notation as in MediaState.Source.
   */
  reverseDomain: string;
}

/**
 * Cancels any active subscription to live media updates
 * that have been registered via previous SubscribeMedia messages.
 * Future MediaUpdate messages will be ignored by the receiver.
 * This is useful for temporarily or permanently pausing live media updates
 * instead of closing the entire connection.
 */
export interface CancelMediaSubscription {
}

/**
 * Sends an update about the current state of active media in the browser.
 * Any subsequent message replaces states from all previous messages.
 */
export interface MediaUpdate {
  media: MediaState[];
}

/** Wrapper */
export interface Message {
  hello?: Hello | undefined;
  subscribeMedia?: SubscribeMedia | undefined;
  cancelMediaSubscription?: CancelMediaSubscription | undefined;
  mediaUpdate?: MediaUpdate | undefined;
}

function createBaseMediaState(): MediaState {
  return { source: undefined, metadata: undefined, playbackState: undefined, resourceLinks: undefined, images: [] };
}

export const MediaState = {
  fromJSON(object: any): MediaState {
    return {
      source: isSet(object.source) ? MediaState_Source.fromJSON(object.source) : undefined,
      metadata: isSet(object.metadata) ? MediaState_Metadata.fromJSON(object.metadata) : undefined,
      playbackState: isSet(object.playback_state)
        ? MediaState_PlaybackState.fromJSON(object.playback_state)
        : undefined,
      resourceLinks: isSet(object.resource_links)
        ? MediaState_ResourceLinks.fromJSON(object.resource_links)
        : undefined,
      images: globalThis.Array.isArray(object?.images)
        ? object.images.map((e: any) => MediaState_Image.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MediaState): unknown {
    const obj: any = {};
    if (message.source !== undefined) {
      obj.source = MediaState_Source.toJSON(message.source);
    }
    if (message.metadata !== undefined) {
      obj.metadata = MediaState_Metadata.toJSON(message.metadata);
    }
    if (message.playbackState !== undefined) {
      obj.playback_state = MediaState_PlaybackState.toJSON(message.playbackState);
    }
    if (message.resourceLinks !== undefined) {
      obj.resource_links = MediaState_ResourceLinks.toJSON(message.resourceLinks);
    }
    if (message.images?.length) {
      obj.images = message.images.map((e) => MediaState_Image.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaState>, I>>(base?: I): MediaState {
    return MediaState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaState>, I>>(object: I): MediaState {
    const message = createBaseMediaState();
    message.source = (object.source !== undefined && object.source !== null)
      ? MediaState_Source.fromPartial(object.source)
      : undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? MediaState_Metadata.fromPartial(object.metadata)
      : undefined;
    message.playbackState = (object.playbackState !== undefined && object.playbackState !== null)
      ? MediaState_PlaybackState.fromPartial(object.playbackState)
      : undefined;
    message.resourceLinks = (object.resourceLinks !== undefined && object.resourceLinks !== null)
      ? MediaState_ResourceLinks.fromPartial(object.resourceLinks)
      : undefined;
    message.images = object.images?.map((e) => MediaState_Image.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMediaState_Source(): MediaState_Source {
  return { reverseDomain: "", siteUrl: "", faviconUrl: undefined };
}

export const MediaState_Source = {
  fromJSON(object: any): MediaState_Source {
    return {
      reverseDomain: isSet(object.reverse_domain) ? globalThis.String(object.reverse_domain) : "",
      siteUrl: isSet(object.site_url) ? globalThis.String(object.site_url) : "",
      faviconUrl: isSet(object.favicon_url) ? globalThis.String(object.favicon_url) : undefined,
    };
  },

  toJSON(message: MediaState_Source): unknown {
    const obj: any = {};
    if (message.reverseDomain !== "") {
      obj.reverse_domain = message.reverseDomain;
    }
    if (message.siteUrl !== "") {
      obj.site_url = message.siteUrl;
    }
    if (message.faviconUrl !== undefined) {
      obj.favicon_url = message.faviconUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaState_Source>, I>>(base?: I): MediaState_Source {
    return MediaState_Source.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaState_Source>, I>>(object: I): MediaState_Source {
    const message = createBaseMediaState_Source();
    message.reverseDomain = object.reverseDomain ?? "";
    message.siteUrl = object.siteUrl ?? "";
    message.faviconUrl = object.faviconUrl ?? undefined;
    return message;
  },
};

function createBaseMediaState_Metadata(): MediaState_Metadata {
  return { title: "", artist: undefined, album: undefined, duration: undefined };
}

export const MediaState_Metadata = {
  fromJSON(object: any): MediaState_Metadata {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      artist: isSet(object.artist) ? globalThis.String(object.artist) : undefined,
      album: isSet(object.album) ? globalThis.String(object.album) : undefined,
      duration: isSet(object.duration) ? globalThis.Number(object.duration) : undefined,
    };
  },

  toJSON(message: MediaState_Metadata): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.artist !== undefined) {
      obj.artist = message.artist;
    }
    if (message.album !== undefined) {
      obj.album = message.album;
    }
    if (message.duration !== undefined) {
      obj.duration = message.duration;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaState_Metadata>, I>>(base?: I): MediaState_Metadata {
    return MediaState_Metadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaState_Metadata>, I>>(object: I): MediaState_Metadata {
    const message = createBaseMediaState_Metadata();
    message.title = object.title ?? "";
    message.artist = object.artist ?? undefined;
    message.album = object.album ?? undefined;
    message.duration = object.duration ?? undefined;
    return message;
  },
};

function createBaseMediaState_PlaybackState(): MediaState_PlaybackState {
  return { position: 0, positionTimestamp: undefined, playing: false };
}

export const MediaState_PlaybackState = {
  fromJSON(object: any): MediaState_PlaybackState {
    return {
      position: isSet(object.position) ? globalThis.Number(object.position) : 0,
      positionTimestamp: isSet(object.position_timestamp) ? fromJsonTimestamp(object.position_timestamp) : undefined,
      playing: isSet(object.playing) ? globalThis.Boolean(object.playing) : false,
    };
  },

  toJSON(message: MediaState_PlaybackState): unknown {
    const obj: any = {};
    if (message.position !== 0) {
      obj.position = message.position;
    }
    if (message.positionTimestamp !== undefined) {
      obj.position_timestamp = message.positionTimestamp.toISOString();
    }
    if (message.playing !== false) {
      obj.playing = message.playing;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaState_PlaybackState>, I>>(base?: I): MediaState_PlaybackState {
    return MediaState_PlaybackState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaState_PlaybackState>, I>>(object: I): MediaState_PlaybackState {
    const message = createBaseMediaState_PlaybackState();
    message.position = object.position ?? 0;
    message.positionTimestamp = object.positionTimestamp ?? undefined;
    message.playing = object.playing ?? false;
    return message;
  },
};

function createBaseMediaState_Image(): MediaState_Image {
  return { url: undefined, data: undefined, mimeType: undefined, width: undefined, height: undefined };
}

export const MediaState_Image = {
  fromJSON(object: any): MediaState_Image {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : undefined,
      data: isSet(object.data) ? bytesFromBase64(object.data) : undefined,
      mimeType: isSet(object.mime_type) ? globalThis.String(object.mime_type) : undefined,
      width: isSet(object.width) ? globalThis.Number(object.width) : undefined,
      height: isSet(object.height) ? globalThis.Number(object.height) : undefined,
    };
  },

  toJSON(message: MediaState_Image): unknown {
    const obj: any = {};
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    if (message.data !== undefined) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.mimeType !== undefined) {
      obj.mime_type = message.mimeType;
    }
    if (message.width !== undefined) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== undefined) {
      obj.height = Math.round(message.height);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaState_Image>, I>>(base?: I): MediaState_Image {
    return MediaState_Image.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaState_Image>, I>>(object: I): MediaState_Image {
    const message = createBaseMediaState_Image();
    message.url = object.url ?? undefined;
    message.data = object.data ?? undefined;
    message.mimeType = object.mimeType ?? undefined;
    message.width = object.width ?? undefined;
    message.height = object.height ?? undefined;
    return message;
  },
};

function createBaseMediaState_ResourceLinks(): MediaState_ResourceLinks {
  return { trackUrl: {}, albumUrl: {}, artistUrl: {} };
}

export const MediaState_ResourceLinks = {
  fromJSON(object: any): MediaState_ResourceLinks {
    return {
      trackUrl: isObject(object.track_url)
        ? Object.entries(object.track_url).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      albumUrl: isObject(object.album_url)
        ? Object.entries(object.album_url).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      artistUrl: isObject(object.artist_url)
        ? Object.entries(object.artist_url).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: MediaState_ResourceLinks): unknown {
    const obj: any = {};
    if (message.trackUrl) {
      const entries = Object.entries(message.trackUrl);
      if (entries.length > 0) {
        obj.track_url = {};
        entries.forEach(([k, v]) => {
          obj.track_url[k] = v;
        });
      }
    }
    if (message.albumUrl) {
      const entries = Object.entries(message.albumUrl);
      if (entries.length > 0) {
        obj.album_url = {};
        entries.forEach(([k, v]) => {
          obj.album_url[k] = v;
        });
      }
    }
    if (message.artistUrl) {
      const entries = Object.entries(message.artistUrl);
      if (entries.length > 0) {
        obj.artist_url = {};
        entries.forEach(([k, v]) => {
          obj.artist_url[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaState_ResourceLinks>, I>>(base?: I): MediaState_ResourceLinks {
    return MediaState_ResourceLinks.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaState_ResourceLinks>, I>>(object: I): MediaState_ResourceLinks {
    const message = createBaseMediaState_ResourceLinks();
    message.trackUrl = Object.entries(object.trackUrl ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.albumUrl = Object.entries(object.albumUrl ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.artistUrl = Object.entries(object.artistUrl ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseMediaState_ResourceLinks_TrackUrlEntry(): MediaState_ResourceLinks_TrackUrlEntry {
  return { key: "", value: "" };
}

export const MediaState_ResourceLinks_TrackUrlEntry = {
  fromJSON(object: any): MediaState_ResourceLinks_TrackUrlEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: MediaState_ResourceLinks_TrackUrlEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaState_ResourceLinks_TrackUrlEntry>, I>>(
    base?: I,
  ): MediaState_ResourceLinks_TrackUrlEntry {
    return MediaState_ResourceLinks_TrackUrlEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaState_ResourceLinks_TrackUrlEntry>, I>>(
    object: I,
  ): MediaState_ResourceLinks_TrackUrlEntry {
    const message = createBaseMediaState_ResourceLinks_TrackUrlEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseMediaState_ResourceLinks_AlbumUrlEntry(): MediaState_ResourceLinks_AlbumUrlEntry {
  return { key: "", value: "" };
}

export const MediaState_ResourceLinks_AlbumUrlEntry = {
  fromJSON(object: any): MediaState_ResourceLinks_AlbumUrlEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: MediaState_ResourceLinks_AlbumUrlEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaState_ResourceLinks_AlbumUrlEntry>, I>>(
    base?: I,
  ): MediaState_ResourceLinks_AlbumUrlEntry {
    return MediaState_ResourceLinks_AlbumUrlEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaState_ResourceLinks_AlbumUrlEntry>, I>>(
    object: I,
  ): MediaState_ResourceLinks_AlbumUrlEntry {
    const message = createBaseMediaState_ResourceLinks_AlbumUrlEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseMediaState_ResourceLinks_ArtistUrlEntry(): MediaState_ResourceLinks_ArtistUrlEntry {
  return { key: "", value: "" };
}

export const MediaState_ResourceLinks_ArtistUrlEntry = {
  fromJSON(object: any): MediaState_ResourceLinks_ArtistUrlEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: MediaState_ResourceLinks_ArtistUrlEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaState_ResourceLinks_ArtistUrlEntry>, I>>(
    base?: I,
  ): MediaState_ResourceLinks_ArtistUrlEntry {
    return MediaState_ResourceLinks_ArtistUrlEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaState_ResourceLinks_ArtistUrlEntry>, I>>(
    object: I,
  ): MediaState_ResourceLinks_ArtistUrlEntry {
    const message = createBaseMediaState_ResourceLinks_ArtistUrlEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseHello(): Hello {
  return { browserType: 0 };
}

export const Hello = {
  fromJSON(object: any): Hello {
    return { browserType: isSet(object.browser_type) ? browserTypeFromJSON(object.browser_type) : 0 };
  },

  toJSON(message: Hello): unknown {
    const obj: any = {};
    if (message.browserType !== 0) {
      obj.browser_type = browserTypeToJSON(message.browserType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Hello>, I>>(base?: I): Hello {
    return Hello.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Hello>, I>>(object: I): Hello {
    const message = createBaseHello();
    message.browserType = object.browserType ?? 0;
    return message;
  },
};

function createBaseSubscribeMedia(): SubscribeMedia {
  return { websites: [] };
}

export const SubscribeMedia = {
  fromJSON(object: any): SubscribeMedia {
    return {
      websites: globalThis.Array.isArray(object?.websites)
        ? object.websites.map((e: any) => SubscribeMedia_Website.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SubscribeMedia): unknown {
    const obj: any = {};
    if (message.websites?.length) {
      obj.websites = message.websites.map((e) => SubscribeMedia_Website.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubscribeMedia>, I>>(base?: I): SubscribeMedia {
    return SubscribeMedia.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubscribeMedia>, I>>(object: I): SubscribeMedia {
    const message = createBaseSubscribeMedia();
    message.websites = object.websites?.map((e) => SubscribeMedia_Website.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSubscribeMedia_Website(): SubscribeMedia_Website {
  return { reverseDomain: "" };
}

export const SubscribeMedia_Website = {
  fromJSON(object: any): SubscribeMedia_Website {
    return { reverseDomain: isSet(object.reverse_domain) ? globalThis.String(object.reverse_domain) : "" };
  },

  toJSON(message: SubscribeMedia_Website): unknown {
    const obj: any = {};
    if (message.reverseDomain !== "") {
      obj.reverse_domain = message.reverseDomain;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubscribeMedia_Website>, I>>(base?: I): SubscribeMedia_Website {
    return SubscribeMedia_Website.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubscribeMedia_Website>, I>>(object: I): SubscribeMedia_Website {
    const message = createBaseSubscribeMedia_Website();
    message.reverseDomain = object.reverseDomain ?? "";
    return message;
  },
};

function createBaseCancelMediaSubscription(): CancelMediaSubscription {
  return {};
}

export const CancelMediaSubscription = {
  fromJSON(_: any): CancelMediaSubscription {
    return {};
  },

  toJSON(_: CancelMediaSubscription): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CancelMediaSubscription>, I>>(base?: I): CancelMediaSubscription {
    return CancelMediaSubscription.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CancelMediaSubscription>, I>>(_: I): CancelMediaSubscription {
    const message = createBaseCancelMediaSubscription();
    return message;
  },
};

function createBaseMediaUpdate(): MediaUpdate {
  return { media: [] };
}

export const MediaUpdate = {
  fromJSON(object: any): MediaUpdate {
    return {
      media: globalThis.Array.isArray(object?.media) ? object.media.map((e: any) => MediaState.fromJSON(e)) : [],
    };
  },

  toJSON(message: MediaUpdate): unknown {
    const obj: any = {};
    if (message.media?.length) {
      obj.media = message.media.map((e) => MediaState.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaUpdate>, I>>(base?: I): MediaUpdate {
    return MediaUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaUpdate>, I>>(object: I): MediaUpdate {
    const message = createBaseMediaUpdate();
    message.media = object.media?.map((e) => MediaState.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMessage(): Message {
  return { hello: undefined, subscribeMedia: undefined, cancelMediaSubscription: undefined, mediaUpdate: undefined };
}

export const Message = {
  fromJSON(object: any): Message {
    return {
      hello: isSet(object.hello) ? Hello.fromJSON(object.hello) : undefined,
      subscribeMedia: isSet(object.subscribe_media) ? SubscribeMedia.fromJSON(object.subscribe_media) : undefined,
      cancelMediaSubscription: isSet(object.cancel_media_subscription)
        ? CancelMediaSubscription.fromJSON(object.cancel_media_subscription)
        : undefined,
      mediaUpdate: isSet(object.media_update) ? MediaUpdate.fromJSON(object.media_update) : undefined,
    };
  },

  toJSON(message: Message): unknown {
    const obj: any = {};
    if (message.hello !== undefined) {
      obj.hello = Hello.toJSON(message.hello);
    }
    if (message.subscribeMedia !== undefined) {
      obj.subscribe_media = SubscribeMedia.toJSON(message.subscribeMedia);
    }
    if (message.cancelMediaSubscription !== undefined) {
      obj.cancel_media_subscription = CancelMediaSubscription.toJSON(message.cancelMediaSubscription);
    }
    if (message.mediaUpdate !== undefined) {
      obj.media_update = MediaUpdate.toJSON(message.mediaUpdate);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message>, I>>(base?: I): Message {
    return Message.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message>, I>>(object: I): Message {
    const message = createBaseMessage();
    message.hello = (object.hello !== undefined && object.hello !== null) ? Hello.fromPartial(object.hello) : undefined;
    message.subscribeMedia = (object.subscribeMedia !== undefined && object.subscribeMedia !== null)
      ? SubscribeMedia.fromPartial(object.subscribeMedia)
      : undefined;
    message.cancelMediaSubscription =
      (object.cancelMediaSubscription !== undefined && object.cancelMediaSubscription !== null)
        ? CancelMediaSubscription.fromPartial(object.cancelMediaSubscription)
        : undefined;
    message.mediaUpdate = (object.mediaUpdate !== undefined && object.mediaUpdate !== null)
      ? MediaUpdate.fromPartial(object.mediaUpdate)
      : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
